Angular is a javascript framework used to create single page web applications
It will have one single html with multiple javascript code files behind it.the whole page does not reload for each single 
click .
Angular is a jsframework that changes the DOM(Html) at runtime
this increases performance there no multiple requests going to server for multiple html files (single html file)

Angular 1 is called AngularJS
Angular2 & above is called Angular-Angular2 is complete rewrite of AngularJS

TypeScript:---
Angular uses TypeScript which is on top of javascript
TypeScript is compiled to javascript
Angular CLI helps to compile the TypeScript code to javascript.
By default datatypes is TypeScript will have "any" datatype
eg datatypes:string,number,boolean,Array<string>,any

ngModel directive binds the html element with the element defined app.component.ts
eg : <input type = "text" [(ngModel)] = "name">
    {{name}}
    ngModel listens to the value entered in the text box and binds it to the name attribute
    
Bootstrap setup:
go to the project location in cmd and enter npm install --save bootstap
this will download bootstrap into node_modules 
set "styles": [
              "node_modules/bootstrap/dist/css/bootstrap.min.css",
              "src/styles.css"
            ], in angular.json file

platformBrowserDynamic().bootstrapModule(AppModule) - this is the firt code that gets executed in the angular applications
main.ts-->app.module.ts-->app component(app.component.html)-->index.html
--------------------------------------------------
Components:
Angular will parse the <app-root> component in index.html file and insert the angular application in this place
Components are the key features in Angular application
The whole application is built with components
App-component is the root component-All the other components are added to this app-component
Each component can have its own template,css & business logic
we can also attain reusability with  this components based approach

Creating a new Component:
------------------------
Each Component file will have a class,and a component decorator (this will have template url & selector)
@component - this will tell angular that this is a component
The new component created has to be registered in the app.module.ts( in the declarations array)

Using a Comonent:
---------------
we need to add the component tag(specified in selector) in the app.component.html file to show the custom component in the app component

creating components with CLI & Nesting Components:
-------------------------------------------------=
use ng generate component <component-name> or ng g c <component-name> 
This will automatically create selector,templateUrl & also automatically register this component in the app module.
we can also nest one component in other componenst(add one component in to hmtl of the other component)
working with templates:
----------------------
We can also use inline templates-template:`<html code>`- instead of using an external html file
Understanding selectors:
-----------------------
element type selectors
eg:In component-selector:'app-root'
    In html file:<app-root></app-root>

attribute type selectors
eg:selector:`[app-root]`
    In hmtl file:<div app-root></div>
class type selectors
eg:selector:'.app-root'
    In html file:<div class="app-root"></div>

DataBinding:
-----------
DataBinding is communication between TypeScriptCode(Business logic ) and the Template(Html)
Output Data:
-->String Interpolation
-->Property Binding
React to (User)Events:
-->Event Binding
combining both:
-->Two-way-Binding
String Interpolation:
-------------------
notation - {{}} StringInterpolation is binding of a string(component.ts) to html element by using {{}} notation
Property Binding notation - []=""

Directives:
----------
Directives are instructions to the DOM
 --> ngIf - this attribute can be added in the template to execute when the condition is true.
    ngIf is a structural directive so we add '*' before it
 eg:<p *ngIf="true"(or some method/variable which returns true)>{{}}</p>
   else condition can also be added to this ngIf
   eg:<p *ngIf="someMethod() ; else other">{{}}</p>
        <ng-template #other>
        <p>else condition</p>
        </ng-template>
---> ngStyle to set style to the template elements
--> ngFor

test
test1

components & DataBinding:(This is usesful for components communication)
-------------------------
Splitting apps into components will help bundle our business logic into different componensts this will also help in reusability of the components
Property & Event Binding:
property and event binding can be done on HTML Elements(Native Property & Events),Directives(Custome propeties & events),
Components(custom Properties &Events)

Binding to custom properties:(expose our own properties to the other components)
----------------------------
from when parent to child component
To expose any of the property to other components we need to add @Input() decorator to the property 
eg:@Input() element:{type:string,name:string,content:string};
    also import {Input} from @angular/core; --server component
    now we can access this property in the app component(parent component)
We can also an alias to property
eg:@Input(srvElement) element:{type:string,name:string,content:string}
so now this property can be used as "srvElement" in app component

Binding to Custom Events:(@Output)
------------------------
from child component to parent componet
when a button is added in cockpit component and want to communicate this to app component
go through section 5 ,65 lecture
We can also an alias to event
eg:@Output(bbCreated)

View encapsulation defines whether the template and styles defined within the component can affect the whole application or vice versa. Angular provides three encapsulation strategies:
Emulated (default) - styles from main HTML propagate to the component. Styles defined in this component's @Component decorator are scoped to this component only.
Native - styles from main HTML do not propagate to the component. Styles defined in this component's @Component decorator are scoped to this component only.
None - styles from the component propagate back to the main HTML and therefore are visible to all components on the page. Be careful with apps that have None and Native components in the application. All components with None encapsulation will have their styles duplicated in all 
components with Native encapsulation.

Routing:
-------
The routing mechanism allows us to navigate between different views(via components) and allowing us to configure it to make it more flexible while providing us with features like lazy loading to ease load times and increase performance.
Steps :-
Create a module to store routing paths and define different paths and routes in it.
Import the routing module to your app.module.ts and add routing module name to the imports of @NgModule.
Add routing selector tags to your appcomponent's html.
Adding router links for navigation and
<base href="/"> to our index.html Â 
