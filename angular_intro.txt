Angular is a javascript framework used to create single page web applications
It will have one single html with multiple javascript code files behind it.the whole page does not reload for each single 
click .
Angular is a jsframework that changes the DOM(Html) at runtime
this increases performance there no multiple requests going to server for multiple html files (single html file)

Angular 1 is called AngularJS
Angular2 & above is called Angular-Angular2 is complete rewrite of AngularJS

TypeScript:---
Angular uses TypeScript which is on top of javascript
TypeScript is compiled to javascript
Angular CLI helps to compile the TypeScript code to javascript.
By default datatypes is TypeScript will have "any" datatype
eg datatypes:string,number,boolean,Array<string>,any

ngModel directive binds the html element with the element defined app.component.ts
eg : <input type = "text" [(ngModel)] = "name">
    {{name}}
    ngModel listens to the value entered in the text box and binds it to the name attribute
    
Bootstrap setup:
go to the project location in cmd and enter npm install --save bootstap
this will download bootstrap into node_modules 
set "styles": [
              "node_modules/bootstrap/dist/css/bootstrap.min.css",
              "src/styles.css"
            ], in angular.json file

platformBrowserDynamic().bootstrapModule(AppModule) - this is the firt code that gets executed in the angular applications
main.ts-->app.module.ts-->app component(app.component.html)-->index.html
--------------------------------------------------
Components:
Angular will parse the <app-root> component in index.html file and insert the angular application in this place
Components are the key features in Angular application
The whole application is built with components
App-component is the root component-All the other components are added to this app-component
Each component can have its own template,css & business logic
we can also attain reusability with  this components based approach

Creating a new Component:
------------------------
Each Component file will have a class,and a component decorator (this will have template url & selector)
@component - this will tell angular that this is a component
The new component created has to be registered in the app.module.ts( in the declarations array)

Using a Comonent:
---------------
we need to add the component tag(specified in selector) in the app.component.html file to show the custom component in the app component

creating components with CLI & Nesting Components:
-------------------------------------------------=
use ng generate component <component-name> or ng g c <component-name> 
This will automatically create selector,templateUrl & also automatically register this component in the app module.
we can also nest one component in other componenst(add one component in to hmtl of the other component)
working with templates:
----------------------
We can also use inline templates-template:`<html code>`- instead of using an external html file
Understanding selectors:
-----------------------
element type selectors
eg:In component-selector:'app-root'
    In html file:<app-root></app-root>

attribute type selectors
eg:selector:`[app-root]`
    In hmtl file:<div app-root></div>
class type selectors
eg:selector:'.app-root'
    In html file:<div class="app-root"></div>

DataBinding:
-----------
DataBinding is communication between TypeScriptCode(Business logic ) and the Template(Html)
Output Data:
-->String Interpolation
-->Property Binding
React to (User)Events:
-->Event Binding
combining both:
-->Two-way-Binding
String Interpolation:
-------------------
notation - {{}} StringInterpolation is binding of a string(component.ts) to html element by using {{}} notation
Property Binding notation - []=""

Directives:
----------
Directives are instructions to the DOM
 --> ngIf - this attribute can be added in the template to execute when the condition is true.
    ngIf is a structural directive so we add '*' before it
 eg:<p *ngIf="true"(or some method/variable which returns true)>{{}}</p>
   else condition can also be added to this ngIf
   eg:<p *ngIf="someMethod() ; else other">{{}}</p>
        <ng-template #other>
        <p>else condition</p>
        </ng-template>
---> ngStyle to set style to the template elements
--> ngFor